The project will require lots of elements to make it run properly.
There will need to be three sperate files leading up to the Personal.java
There will need to be an hourly employee class a salary class and then an employee class in which they all will exntend from. The employee class will be very rudamentary and abstract. Having only basic code but it will serve as the basis and building ground for the rest of the project. Changing even a small element in the employee class will make all extending files and the class Personel to change. The employee class will also require an abstract method which is an empty method body with no parameters or even a pair of {}. This method has to be extended by Salary and Hourly as they extend Employee. The personnel class will have the majority of the code and will be able to call the code from Salary and Hourly through polymorphism. These classes could exist inside each other however it looks best to have them seperate.The personal class is mostly defined by the series of commands. The rubric required 7, however I added an extra one. This extra command is 'l' or lower wage which lowers wage by an inputted percentage. I originally had an idea for an extra type of employee class called minimumwage and would use 50 if statements to match state abbreviations, but that was a lot of repetitive code so I opted for the lower wages. Anyway, the command prompt in Personnel has 7/8 commands. The first one allows for the user to add a person to the employee arraylist. This will continue by allowing the user to put in either h or s which will be allowedd through via a nested switch statement. The next method is compute pay which will ask the user for hourly input to give a more understandable idea of what the numbers mean and make a better comparison between salary and hourly employees. Next the ability to raise and lower wages. The user can raise wages by inputting a percentage similarly the lower wage will act on the same premise. The lower wage parameter will need an extra perimeter to make sure the wage does not drop to 0. Therefore a statement will be needed to make sure the percentage is <100. The download command will be ripped from canvas and allow for the employeelist and information to be downloaded and additionally encrypted. I thought that part was very interesting. The next will allow for user input on file given they have the matching filename. Again, this method was also ripped from canvas. The final command is to quit the program which is done by fulfilling a while loop.
