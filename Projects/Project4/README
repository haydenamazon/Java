There are five classes to be used in this project: Job, Node, Queue, QueueInterface, and finally QueueException. The Queue class's constructorr begins by setting the last node to null (lastNode = null). The Queue class contains many methods. .setNext and .getNext involve looking at the next value in any type of list. They can be used in linkedlists, stacks, and in this project a circular queue. Another example of a method used for data structures is .getItem. This method does what the name implies, it gets the value stored at a singular specified spot. The queue class is then filled with multiple methods. isEmpty is a boolean method that checks to see if the lastNode is empty. Dequeueall sets the last node to null and since this is a circular array all items will become dequeued. Enqueue adds an item to the end of the queue. This method has two parameters, one if the queue is empty and the other if it is occupied with atleast one item. Dequeue is another queue that gets rid of the first item of the queue (remember first in last out). This needs to check three parameters: if the queue is empty, if there is only one item, and then if theres more than one item in the queue. Peek is a method that allows the user to "view" the selected queue item. Essentially this is just a print/return method for queues. A clone method is present to be able to clone the queue to allow for alterations without damaging the master copy. The queue class is a major building block for the rest of the code. TimeShare, the driver class, is built off this and calls the aforementioned methods. The TimeShare class is a circular array built off nodes. In order to add an element to the jobqueue, an element is added to the back of the queue and have the lastNode connect to this new Node instead of the node at the front of the queue. Similar to the monkey ring example from class, adding elements to the circular queue creates a larger queue or circle. The TimeShare file has multiple methods. The method all calls the job trial method and increases the finishjob variable. jobTrial is the largest method of the file and contains multiple statements to orgranize and sort through all the jobs. ClearScreen is a method used in the last two projects which helps create a better looking work space by clearing the screen. Createjobs read the file through the scanner and looks at the job title and the numbers (ints) associated with each. PrintJobs print the queues contents, ultimately printing all the jobs and data in each. The menu method prints all the information like cpu usage, idle time, averagewait and more. 
Actual example:
job1 01 04
job2 02 02
job3 12 01
job4 14 05
job5 21 02
AVG Wait 0.6
Usage 14
Idle 8
CPU Usage 63.64
AVG Wait is found by taking the sum of all wait times and dividing it by the total number of jobs. Usage is the sum of all sum of all hours. CPU Usage% is found by dividing the Usage by the sum of Usage and Idle Time (14 / 22) = 63.636 or 63.64.
